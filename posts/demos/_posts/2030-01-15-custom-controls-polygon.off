---
layout: demoV4
title: Custom controls, polygon
codepen: true
---
<div
  class="codepen-later"
  data-editable="true"
  data-height="600"
  data-default-tab="js,result"
  data-prefill='{
    "scripts": "https://unpkg.com/fabric@4.0.0-beta1/dist/fabric.js"
  }'
>
<pre data-lang="css" data-options-autoprefixer="true">
  .controls {
  	display: inline-block;
  }
</pre>

<pre data-lang="html">
  <div class="controls">
    <p>
      <button id="edit" onclick="Edit()">Toggle editing polygon</button>
    </p>
  </div>
  <canvas id="c" width="500" height="400" style="border:1px solid #ccc"></canvas>
</pre>
<pre data-lang="js">
	var canvas = this.__canvas = new fabric.Canvas('c');
	// create a polygon object
	var points = [{
		x: 3, y: 4
	}, {
		x: 30, y: 5
	},  {
		x: 25, y: 55
	}, {
		x: 15, y: 30
	}, {
		x: 5, y: 55
	}, {
		x: -2, y: 55
	}]
	var polygon = new fabric.Polygon(points, {
		left: 100,
		top: 50,
		fill: '#D81B60',
		strokeWidth: 0,
		scaleX: 4,
		scaleY: 4,
		objectCaching: false,
		transparentCorners: false,
		cornerColor: 'blue'
	});

	canvas.add(polygon);

	// define a function that can locate the controls.
	// this function will be used both for drawing and for interaction.
	function polygonPositionHandler(dim, finalMatrix, fabricObject) {
	  var x = (fabricObject.points[this.pointIndex].x - fabricObject.pathOffset.x),
		    y = (fabricObject.points[this.pointIndex].y - fabricObject.pathOffset.y);
		return fabric.util.transformPoint(
			{ x: x, y: y }, fabricObject.calcTransformMatrix()
		);
	}

	// define a function that will define what the control does
	// this function will be called on every mouse move after a control has been
	// clicked and is being dragged.
	// The function receive as argument the mouse event, the current trasnform object
	// and the current position in canvas coordinate
	// transform.target is a reference to the current object being transformed,
	function actionHandler(eventData, transform, x, y) {
		var polygon = transform.target,
		    currentControl = polygon.controls[polygon.__corner],
		    mouseLocalPosition = polygon.toLocalPoint(new fabric.Point(x, y), 'center', 'center'),
				size = polygon._getTransformedDimensions(0, 0),
				finalPointPosition = {
					x: mouseLocalPosition.x * polygon.width / size.x + polygon.pathOffset.x,
					y: mouseLocalPosition.y * polygon.height / size.y + polygon.pathOffset.y
				};
		polygon.points[currentControl.pointIndex] = finalPointPosition;
		return true;
	}

  // define a function that can keep the polygon in the same position when we change its
  // width/height/top/left.
  function anchorWrapper(anchorIndex, fn) {
    return function(eventData, transform, x, y) {
      var fabricObject = transform.target,
          anchorPoint = { x: fabricObject.left, y: fabricObject.top },
          relX = (fabricObject.points[anchorIndex].x / fabricObject.width),
  		    relY = (fabricObject.points[anchorIndex].y / fabricObject.height);
      var currentPosition = fabricObject.translateToOriginPoint(anchorPoint, relX, relY);
      console.log({ currentPosition, relX, relY })
      var actionPerformed = fn(eventData, transform, x, y);
      var newDim = fabricObject._setPositionDimensions({});
      var newX = (fabricObject.points[anchorIndex].x) / fabricObject.width,
  		    newY = (fabricObject.points[anchorIndex].y) / fabricObject.height;
      // fabricObject.setPositionByOrigin(currentPosition, newX, newY);
      return actionPerformed;
    }
  }

	function Edit() {
		// clone what are you copying since you
		// may want copy and paste on different moment.
		// and you do not want the changes happened
		// later to reflect on the copy.
		var poly = canvas.getObjects()[0];
		canvas.setActiveObject(poly);
		poly.edit = !poly.edit;
		if (poly.edit) {
      var lastControl = poly.points.length - 1;
	    poly.controls = poly.points.reduce(function(acc, point, index) {
				acc['p' + index] = new fabric.Control({
					positionHandler: polygonPositionHandler,
					actionHandler: anchorWrapper(index > 0 ? index - 1 : lastControl, actionHandler),
					actionName: 'modifyPoligon',
					pointIndex: index
				});
				return acc;
			}, { });
		} else {
			poly.controls = fabric.Object.prototype.controls;
		}
		poly.hasBorders = !poly.edit;
		canvas.requestRenderAll();
	}
</pre>
</div>
